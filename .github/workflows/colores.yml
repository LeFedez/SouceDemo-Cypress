name: Cypress Tests and Slack Notification

on:
  push:
    branches:
      - main

jobs:
  cypress-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run Cypress tests with Mochawesome
        run: |
          npx cypress run --reporter mochawesome \
                          --reporter-options reportDir=cypress/results,overwrite=false,html=false,json=true
        continue-on-error: true

      - name: Extract test summary # Extrae los resultados de las pruebas
        if: always()
        id: extract_summary_data # Renombrado para claridad
        run: |
          RESULTS_FILE="cypress/results/mochawesome.json"
          
          # Verificar si el archivo de reporte existe
          if [ ! -f "$RESULTS_FILE" ]; then
            echo "ADVERTENCIA: El archivo de reporte '$RESULTS_FILE' no fue encontrado."
            echo "total_tests=0" >> "$GITHUB_ENV"
            echo "passed_tests=0" >> "$GITHUB_ENV"
            echo "failed_tests=0" >> "$GITHUB_ENV"
            echo "skipped_tests=0" >> "$GITHUB_ENV"
            echo "duration_seconds=0" >> "$GITHUB_ENV"
          else
            # Extrae los valores usando jq y los guarda como variables de entorno de GitHub
            echo "total_tests=$(jq '.stats.tests' "$RESULTS_FILE")" >> "$GITHUB_ENV"
            echo "passed_tests=$(jq '.stats.passes' "$RESULTS_FILE")" >> "$GITHUB_ENV"
            echo "failed_tests=$(jq '.stats.failures' "$RESULTS_FILE")" >> "$GITHUB_ENV"
            echo "skipped_tests=$(jq '.stats.skipped' "$RESULTS_FILE")" >> "$GITHUB_ENV"
            # Duraci√≥n en milisegundos, la guardamos tal cual y la procesamos en el payload
            echo "duration_seconds=$(jq '.stats.duration' "$RESULTS_FILE" | awk '{print int($1/1000)}') " >> "$GITHUB_ENV" 
            # ^ Dividimos por 1000 y tomamos la parte entera directamente aqu√≠
          fi
          
          # Determina el color y texto de estado para el payload
          if [ "${{ env.failed_tests }}" -gt 0 ]; then
            echo "result_color=danger" >> "$GITHUB_ENV" # 'danger' para rojo
            echo "status_text=üî¥ *FALLA EN LAS PRUEBAS* üî¥" >> "$GITHUB_ENV"
          else
            echo "result_color=good" >> "$GITHUB_ENV" # 'good' para verde
            echo "status_text=‚úÖ *PRUEBAS EXITOSAS* ‚úÖ" >> "$GITHUB_ENV"
          fi

          # Prepara el texto de duraci√≥n
          duration_val="${{ env.duration_seconds }}"
          if [ "$duration_val" -ge 60 ]; then
            minutes=$((duration_val / 60))
            remaining_seconds=$((duration_val % 60))
            if [ "$remaining_seconds" -eq 0 ]; then
              echo "duration_display=$minutes minutos" >> "$GITHUB_ENV"
            else
              echo "duration_display=$minutes minutos y $remaining_seconds segundos" >> "$GITHUB_ENV"
            fi
          else
            echo "duration_display=$duration_val segundos" >> "$GITHUB_ENV"
          fi
          
          # Variables de contexto para el payload
          echo "short_sha=$(echo \"${{ github.sha }}\" | cut -c1-7)" >> "$GITHUB_ENV"
          echo "repo_base_url=https://github.com/${{ github.repository }}" >> "$GITHUB_ENV"
          echo "action_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> "$GITHUB_ENV"
          echo "checks_url=${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}/checks" >> "$GITHUB_ENV"
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> "$GITHUB_ENV"
          echo "user_commit_username=${{ github.event.head_commit.committer.username }}" >> "$GITHUB_ENV"
          echo "last_commit_message=${{ github.event.head_commit.message }}" >> "$GITHUB_ENV"


      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # AHORA: Todo el JSON es un string multi-l√≠nea directamente en YAML.
          # NOTA: Todas las comillas dobles DENTRO del JSON deben ser escapadas (doble barra inversa \\").
          # Esto es propenso a errores, ¬°mucho cuidado con la sintaxis!
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ env.result_color }}",
                  "author_name": "${{ env.user_commit_username }}",
                  "author_link": "https://github.com/${{ env.user_commit_username }}",
                  "author_icon": "https://github.com/${{ env.user_commit_username }}.png?size=32",
                  "title": "${{ env.status_text }}",
                  "title_link": "${{ env.action_url }}",
                  "text": "*Resultados de Pruebas Cypress* para el commit \`${{ env.short_sha }}\` en la rama `${{ env.branch_name }}`\nWorkflow ejecutado por ${{ env.user_commit_username }} en el repositorio <${{ env.repo_base_url }}|${{ github.repository }}>",
                  "fields": [
                    { "title": "Mensaje Commit", "value": "${{ env.last_commit_message }}", "short": false },
                    { "title": "Tests Totales", "value": "${{ env.total_tests }}", "short": true },
                    { "title": "Tests Satisfactorios", "value": "${{ env.passed_tests }}", "short": true },
                    { "title": "Tests Fallidos", "value": "${{ env.failed_tests }}", "short": true },
                    { "title": "Tests Saltados", "value": "${{ env.skipped_tests }}", "short": true },
                    { "title": "Duraci√≥n", "value": "${{ env.duration_display }}", "short": true }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "Ver Ejecuci√≥n en GitHub",
                      "url": "${{ env.action_url }}"
                    },
                    {
                      "type": "button",
                      "text": "Ver Checks del Commit",
                      "url": "${{ env.checks_url }}"
                    },
                    {
                      "type": "button",
                      "text": "Ir al Repositorio",
                      "url": "${{ env.repo_base_url }}"
                    }
                  ],
                  "footer": "GitHub Actions",
                  "ts": ${{ github.run_started_at | split('T') | first | tojson }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Upload Cypress artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/results/mochawesome.json
          retention-days: 5