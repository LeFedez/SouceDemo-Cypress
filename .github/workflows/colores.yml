name: Cypress Tests and Slack Notification

on:
  push:
    branches:
      - main
  # Considera a√±adir 'pull_request' si quieres ejecutar las pruebas antes de fusionar PRs
  # pull_request:
  #   branches:
  #     - main
  # Tambi√©n puedes a√±adir un trigger manual si es √∫til para depuraci√≥n o ejecuciones espec√≠ficas
  # workflow_dispatch:

jobs:
  cypress-run:
    runs-on: ubuntu-latest # Ejecuta el job en una m√°quina virtual Ubuntu

    steps:
      - name: Checkout repository # Paso para clonar el repositorio
        uses: actions/checkout@v4

      - name: Setup Node.js # Paso para configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Especifica la versi√≥n de Node.js a usar

      - name: Install dependencies # Paso para instalar las dependencias de Node.js
        run: npm ci # Usa 'npm ci' para instalaciones limpias y consistentes en CI

      - name: Run Cypress tests with Mochawesome # Ejecuta las pruebas de Cypress
        # Utiliza la acci√≥n dedicada de Cypress para mejor manejo y cach√©
        uses: cypress-io/github-action@v6
        with:
          install-command: 'npm ci' # Comando para instalar dependencias si la acci√≥n lo necesita (redundante si 'npm ci' ya est√° arriba, pero buena pr√°ctica)
          command: 'npx cypress run --reporter mochawesome --reporter-options reportDir=cypress/results,overwrite=false,html=false,json=true'
          # Asegura que este comando coincide con c√≥mo generas tu mochawesome.json
        continue-on-error: true # Importante: Permite que el workflow contin√∫e incluso si las pruebas fallan

      - name: Extract test summary # Extrae los resultados de las pruebas del reporte Mochawesome JSON
        if: always() # Se ejecuta siempre, independientemente del √©xito del paso anterior
        id: extract_summary # Agregamos un ID para referencia futura si fuera necesario
        run: |
          RESULTS_FILE="cypress/results/mochawesome.json"
          
          # Verificar si el archivo de resultados existe para evitar errores si Cypress no lo genera
          if [ -f "$RESULTS_FILE" ]; then
            echo "Reporte Mochawesome encontrado en: $RESULTS_FILE"
            # Extrae los valores usando jq y los guarda como variables de entorno de GitHub
            echo "PASSED_TESTS=$(jq '.stats.passes' "$RESULTS_FILE")" >> "$GITHUB_ENV"
            echo "FAILED_TESTS=$(jq '.stats.failures' "$RESULTS_FILE")" >> "$GITHUB_ENV"
            echo "SKIPPED_TESTS=$(jq '.stats.skipped' "$RESULTS_FILE")" >> "$GITHUB_ENV"
            echo "TOTAL_TESTS=$(jq '.stats.tests' "$RESULTS_FILE")" >> "$GITHUB_ENV"
          else
            echo "ADVERTENCIA: No se encontr√≥ 'mochawesome.json' en '$RESULTS_FILE'."
            echo "Asignando valores por defecto a las variables de prueba."
            # Asigna valores por defecto si el archivo no existe
            echo "PASSED_TESTS=0" >> "$GITHUB_ENV"
            echo "FAILED_TESTS=0" >> "$GITHUB_ENV"
            echo "SKIPPED_TESTS=0" >> "$GITHUB_ENV"
            echo "TOTAL_TESTS=0" >> "$GITHUB_ENV"
          fi

      - name: Prepare Slack Attachment Payload # Prepara el JSON completo para la notificaci√≥n de Slack
        if: always() # Se ejecuta siempre
        id: prepare_slack_payload # ID para que el paso 'Send Slack Notification' pueda consumir su output
        run: |
          # Obtiene los primeros 7 caracteres del SHA del commit para un identificador corto
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          # Determina el color y el texto de estado basado en si hay fallas en las pruebas
          ATTACHMENT_COLOR="" # Variable para el color de la barra lateral (hexadecimal)
          STATUS_TEXT=""      # Variable para el texto principal del estado
          if [ "${{ env.FAILED_TESTS }}" -gt 0 ]; then
            ATTACHMENT_COLOR="#FF0000" # Rojo: Equivalente a 'danger' o 'failure'
            STATUS_TEXT="üî¥ *FALLA EN LAS PRUEBAS* üî¥"
          else
            ATTACHMENT_COLOR="#008000" # Verde: Equivalente a 'good' o 'success'
            STATUS_TEXT="‚úÖ *PRUEBAS EXITOSAS* ‚úÖ"
          fi

          # Construye el JSON completo del payload de Slack.
          # Usamos 'attachments' para la barra lateral de color y 'blocks' para el contenido estructurado.
          # NOTA CLAVE: La l√≠nea 'EOF' al final del bloque 'cat <<EOF' DEBE ESTAR SIN INDENTACI√ìN.
          PAYLOAD_JSON=$(cat <<EOF
          {
            "attachments": [
              {
                "color": "$ATTACHMENT_COLOR",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "$STATUS_TEXT\n*Resultados de Pruebas Cypress* para el commit \`<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${SHORT_SHA}>\` en la rama \`${{ github.ref_name }}\`"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Total:*\n${{ env.TOTAL_TESTS }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Passed:*\n${{ env.PASSED_TESTS }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Failed:*\n${{ env.FAILED_TESTS }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Skipped:*\n${{ env.SKIPPED_TESTS }}"
                      }
                    ]
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Ver Workflow en GitHub"
                        },
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                        "style": "primary"
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
            ) # Fin del bloque 'cat <<EOF'. ¬°La l√≠nea 'EOF' anterior debe estar sin indentaci√≥n!
          
          # Pasa el JSON completo como un output del paso para que sea consumido por el siguiente paso
          echo "slack_payload_json=$PAYLOAD_JSON" >> "$GITHUB_OUTPUT"


      - name: Send Slack Notification # Env√≠a la notificaci√≥n a Slack
        if: always() # Se ejecuta siempre
        uses: slackapi/slack-github-action@v1.24.0 # Acci√≥n oficial de Slack para notificaciones
        with:
          # El payload se toma del output del paso anterior
          payload: ${{ steps.prepare_slack_payload.outputs.slack_payload_json }}
        env:
          # Aseg√∫rate de que este secreto est√© configurado en tu repositorio de GitHub
          SLACK_WEBHOOK_URL_COLOR: ${{ secrets.SLACK_WEBHOOK_URL_COLOR }}

      - name: Upload Cypress artifacts # Sube los artefactos generados por Cypress (videos, capturas, reportes)
        if: always() # Sube los artefactos siempre, independientemente del resultado de las pruebas
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results # Nombre del artefacto
          path: | # Rutas a los archivos/directorios a subir
            cypress/videos/
            cypress/screenshots/
            cypress/results/mochawesome.json
          retention-days: 5 # N√∫mero de d√≠as que los artefactos se mantendr√°n en GitHub